
  __________________________________________________
 |                                                  |
 |  Program ev8               Public Version 2      |
 |                                                  |
 |  Copyright  P. Bonche, H. Flocard, P.H. Heenen   |
 |    in case of trouble, take it easy...           |
 |    and (please) let us know                      |
 |__________________________________________________|

This zip archive contains the source code and all extra material needed to 
perform successful calculations with the Ev8 code.

========================= FILES ================================================
This zip archive contains the following files:

CODES:
 * ev8.f
       Source code for Ev8.
 * nil8.f
       Auxiliary program to generate starting wavefunctions for EV8.
 * int8.f
       Auxiliary program to interpolate wavefunctions to different box parameters.
 * den8.f
       Auxiliary program to output the nuclear density to a format that is
       readable by humans and non-FORTRAN programs. Particulary useful for plots.

EXAMPLES:
 * Zr84.sh
       Example (bash) script that runs an unconstrained and a constrained
       Ev8 calculation for 84 Zirconium.
 * zr84.out and zr84.q200.out
       Ev8 output generated by Zr84.sh.
 * Pb208.sh
       Example (bash) script that runs two unconstrained calculations for 208
       lead for different box parametrisations.
 * Pb208.ev8.Sly4.BigBox.out and Pb208.ev8.Sly4.SmallBox.out
       Ev8 output generated by Pb208.sh.

========================= Compilation remarks ==================================

NB: The example scripts assume the program codes are in the same directory as the scripts. Therefore, before running, either copy the program files from the "Codes" directory to the Examples directory or edit the script files to add the path, "../Codes/".


Typical recommended compilation parameters for some

gfortran -O3
pgf90    -O3 -fastsse
ifort    -O3

Some remarks to keep in mind when running into problems:

1) The code is fixed format fortran, about which some compilers complain if you
   don't specify an appropriate option. (You will certainly run into this
   problem if you change the extension of the code files to .f90)
2) The code uses more continuation lines than allowed by the standard fortran. 
   The f95 compiler for example doesn't allow this by default. In that
   particular case the compiler option '-maxcontin 500' (or similar) 
   might help you.
3) When dealing with large boxes or small stepsize, the code requires a large
   memory, which is not always handled well by all compilers. On the gfortran
   and portland compilers, for example, this results in severe compilation
   errors. You might want to add the '-mcmodel=medium' option to the compilation
   command in that case.
   When dealing with extremely large boxes or extremely small stepsizes, this
   might not be enough. Again, for the gfortran and portland group compilers,
   you can probably use the '-mcmodel=large -fno-optimize-sibling-calls'.
   Note that the '-fno-optimize-sibling-calls' is not available for older
   versions of these compilers.
4) For newer versions of the gfortran compilers (starting with the 4.8 series)
   you will see a large number of compiler warnings. These are of no consequence
   however, and simply represent a new error-checking feature of gfortran. They
   are related to the way certain loops are coded, of which gfortran cannot
   internally check their validity.
